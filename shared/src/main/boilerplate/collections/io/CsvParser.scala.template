/*
 * product-collections is distributed under the 2-Clause BSD license. See the
 * LICENSE file in the root of the repository.
 *
 * Copyright (c) 2013 - 2015 Mark Lister
 */

/* This template is processed by sbt-boilerplate  (https://github.com/sbt/sbt-boilerplate).
 * You can see the results (if you clone and build the project from source) in the
 * target/scala-2.xx/src_managed directory
 */

package com.github.marklister.collections
package io

import com.github.marklister.collections.immutable._
//import au.com.bytecode.opencsv.CSVReader
import scala.util.{Try, Success, Failure}

abstract class AbstractIterator[+A] extends Iterator[A]  //scala 2.10.4 compatability
     
/**
 * A Strongly typed Csv to Case Class, CollSeq[T1,T2,...Tn]  Iterator[TupleN] or Iterator[Case Class] Parser.
 * Use the companion object to instantiate the correct parser:
 * {{{
 * scala> val p = CsvParser[String,Int,Double]
 * p: com.github.marklister.collections.io.CsvParser3[String,Int,Double] = com.github.marklister.collections.io.CsvParser3@1d8073f
 * 
 * scala> p.parseFile("sample.csv")
 * res2: com.github.marklister.collections.immutable.CollSeq3[String,Int,Double] =
 * CollSeq((Jan,10,22.33),
 *         (Feb,20,44.2),
 *         (Mar,25,55.1))
 *
 *scala> val data="""10,"stuff",2.2
 *    | 11,"otherstuff",3.0"""
 *data: String = 
 *10,"stuff",2.2
 *11,"otherstuff",3.0
 *
 *scala> val parsedData=CsvParser[Int,String,Double].parse(new java.io.StringReader(data))
 *parsedData: com.github.marklister.collections.immutable.CollSeq3[Int,String,Double] =
 *CollSeq((10,stuff,2.2),
 *        (11,otherstuff,3.0))
 *
 *scala> case class Foo (i:Int,s:String,d:Double)
 *defined class Foo
 *
 *scala> CsvParser(Foo).parse(new java.io.StringReader(data))
 *res1: Seq[Foo] = List(Foo(10,stuff,2.2), Foo(11,otherstuff,3.0))
 *
 * }}}
 */
abstract sealed class CsvParser

object CsvParser{
  [#def apply[[#T1#,]]= new CsvParser1[[#T1#,]]#
  ]

  [#def apply[[#T1#,],F](f:Function1[[#T1#],F])= new CsvParserF1[[#T1#],F](f)#
  ]
}

class CsvParserF1[T1,F](f:Function1[T1,F]) extends CsvParser{
  def parseFile (filename: String, delimiter: String = ",", quoteChar: Char = '"', hasHeader: Boolean = false)
                (implicit c1:GeneralConverter[T1]):Seq[F]
                = parse(new java.io.FileReader(filename),delimiter,quoteChar,hasHeader)

  def parse (reader: java.io.Reader, delimiter: String = ",", quoteChar: Char = '"', hasHeader: Boolean = false)
            (implicit c1:GeneralConverter[T1]):Seq[F]=
      iterator(reader, delimiter, quoteChar, hasHeader).toList

  def iterator (reader: java.io.Reader, delimiter: String = ",", quoteChar: Char = '"', hasHeader: Boolean = false)
               (implicit c1:GeneralConverter[T1]):Iterator[F]
               = new CsvParser1[T1].iterator(reader,delimiter,quoteChar,hasHeader).map(_._1).map(f)
}

[2..22#class CsvParserF1[[#T1#],F](f:Function1[[#T1#],F]) extends CsvParser {
  def parseFile (filename: String, delimiter: String = ",", quoteChar: Char = '"', hasHeader: Boolean = false)
                (implicit [#c1:GeneralConverter[T1]#]):Seq[F]
                = parse(new java.io.FileReader(filename),delimiter,quoteChar,hasHeader)

  def parse (reader: java.io.Reader, delimiter: String = ",", quoteChar: Char = '"', hasHeader: Boolean = false)
              (implicit [#c1:GeneralConverter[T1]#]):Seq[F]
            = iterator(reader,delimiter,quoteChar,hasHeader).toList


  def iterator (reader: java.io.Reader, delimiter: String = ",", quoteChar: Char = '"', hasHeader: Boolean = false)
              (implicit [#c1:GeneralConverter[T1]#]):Iterator[F]
               = new CsvParser1[[#T1#]].iterator(reader,delimiter,quoteChar,hasHeader).map(f.tupled)
}
#
]

[#class CsvParser1[[#T1#,]] extends CsvParser {

  /**
   * Parse a csv file.
   * @param filename: The file name
   * @param delimiter: The delimiter. Use \t for tabs
   * @param quoteChar: The character used for quoted text.
   * @param hasHeader: Whether to skip the first line or not.
   * @return a CollSeq1 containing the parsed data
   */
  def parseFile (filename: String, delimiter: String = ",", quoteChar: Char = '"', hasHeader: Boolean = false)
  (implicit [#c1:GeneralConverter[T1]#]):CollSeq1[[#T1#,]]={
    parse(new java.io.FileReader(filename),delimiter,quoteChar,hasHeader)
  }

  /**
   * Parse a java.io.Reader.
   * @param reader: The reader
   * @param delimiter: The delimiter. Use \t for tabs
   * @param quoteChar: The character used for quoted text.
   * @param hasHeader: Whether to skip the first line or not.
   * @return a CollSeq1 containing the parsed data
   */
  def parse (reader: java.io.Reader, delimiter: String = ",", quoteChar: Char = '"', hasHeader: Boolean = false)
  (implicit [#c1:GeneralConverter[T1]#]):CollSeq1[[#T1#,]]={
    val csvReader = new com.github.marklister.collections.io.CSVReader(reader, delimiter.toCharArray.head, quoteChar, ##0)
    val headers: Seq[String] = if (hasHeader) csvReader.next.toSeq else Seq.empty
    CollSeq1[[#T1#,]](iterator(csvReader).toSeq).withHeaders(headers: _*)
    }

  def iterator (reader: java.io.Reader, delimiter: String = ",", quoteChar: Char = '"', hasHeader: Boolean = false)
        (implicit [#c1:GeneralConverter[T1]#]):Iterator[Tuple1[[#T1#,]]]= {
          val csvReader = new com.github.marklister.collections.io.CSVReader(reader, delimiter.toCharArray.head, quoteChar, if (hasHeader) ##1 else ##0)
          iterator(csvReader)([#c1#])
        }

  def iterator (csvReader: CSVReader)
      (implicit [#c1:GeneralConverter[T1]#]):Iterator[Tuple1[[#T1#,]]]={
      new AbstractIterator[Tuple1[[#T1#,]]] { //TODO this should be a Product1 but can't instantiate a case class from a Product1
        var lineNo= csvReader.headerRows
        def hasNext =csvReader.hasNext
        def next: Tuple1[[#T1#,]] = {
          if (!hasNext) scala.collection.Iterator.empty.next else{
            val x=csvReader.next
            lineNo+=##1
            Try(Tuple1([#c1(x(0))#])) match {
              case Failure(e:Throwable)=> throw new IllegalArgumentException(e.getMessage+" at line "+lineNo+"\n=> "+x.mkString(","),e)
              case Success(t)=> t
            }
          }
        }
      }
    }
  }
#
] 