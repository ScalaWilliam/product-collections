/*
 * product-collections is distributed under the 2-Clause BSD license. See the
 * LICENSE file in the root of the repository.
 *
 * Copyright (c) 2013 - 2014 Mark Lister
 */

/* This template is processed by sbt-boilerplate  (https://github.com/sbt/sbt-boilerplate).
 * You can see the results (if you clone and build the project from source) in the
 * target/scala-2.xx/src_managed directory
 */

 /* This template is processed by sbt-boilerplate  (https://github.com/sbt/sbt-boilerplate).
  * You can see the results (if you clone and build the project from source) in the
  * target/scala-2.xx/src_managed directory
  */

package com.github.marklister.collections
package immutable

import collection.IndexedSeqLike
import collection.mutable.Builder
import collection.generic.CanBuildFrom
import collection.immutable.VectorBuilder
import collection.GenIterable
import scala.language.higherKinds

/**
 * A CollSeq holds 2D typed data.
 * A CollSeq is both an IndexedSeq[Product] and a Product (tuple)
 */

sealed abstract class CollSeq extends IndexedSeq[Product] with Product {
  override def toString = "CollSeq(" +
    this.mkString(",\n        ") + ")"
  override def productIterator = super.productIterator.asInstanceOf[Iterator[Seq[Any]]] // Narrow type
}

object CollSeq {
    //https://gist.github.com/milessabin/c9f8befa932d98dcc7a4 Miles Sabin, Type negation

    // Encoding for "A is not a subtype of B"
    trait <:!<[A, B]

    // Uses ambiguity to rule out the cases we're trying to exclude
    implicit def nsub[A, B] : A <:!< B = null
    implicit def nsubAmbig1[A, B >: A] : A <:!< B = null
    implicit def nsubAmbig2[A, B >: A] : A <:!< B = null

    // Type alias for context bound
    type |¬|[T] = {
      type λ[U] = U <:!< T
    }
    type ProductN=[# Product1[[#_#]] # with Serializable with ] //type ProductN = Product1[_] with Product2[_,_] with ...


  def apply[ T : |¬|[Product]#λ](s : T *):CollSeq1[T] = apply(s.map(Tuple1(_)): _*)

  [1..22#def apply[[#T1#,],P1[[#T1#,]]<:Product1[[#T1#,]]] (s: P1[[#T1#,]] *) = CollSeq1(s)#
  ]
  [1..22#
  implicit def canBuildFrom1[[#T1#,]]: CanBuildFrom[IndexedSeq[Product], Product1[[#T1#,]], CollSeq1[[#T1#,]]] =
  new CanBuildFrom[IndexedSeq[Product], Product1[[#T1#,]], CollSeq1[[#T1#,]]]
  {
    def apply(): Builder[Product1[[#T1#,]], CollSeq1[[#T1#,]]] = CollSeq1.newBuilder
    def apply(from: IndexedSeq[Product]): Builder[Product1[[#T1#,]], CollSeq1[[#T1#,]]] = CollSeq1.newBuilder
  }#
  ]
}

[1..21#class CollSeq1[[#T1#,]] private (val underlying: Seq[Product1[[#T1#]]] )
  extends CollSeq
  with IndexedSeq [Product1[[#T1#,]]]
  with IndexedSeqLike [Product1[[#T1#,]], CollSeq1[[#T1#,]]]
  with Product1 [[#Seq[T1] #]] {

    override protected[this] def newBuilder: Builder[Product1[[#T1#,]], CollSeq1[[#T1#,]]] = CollSeq1.newBuilder
    override def apply (idx: Int): Product1[[#T1#,]] = underlying (idx)
    lazy val length: Int = underlying.length
    override def productElement(n:Int):Seq[Any] = super.productElement(n).asInstanceOf[Seq[Any]]

    [#override lazy val _1: Seq[T1] = Seq (underlying.map (_._1): _*) #
    ]
    def flatZip[B] (that: GenIterable[B] ) (implicit bf: CanBuildFrom[CollSeq1[[#T1#,]], Tuple2[[#T1#,], B], CollSeq2[[#T1#,], B]] ): CollSeq2[[#T1#,], B] = {
      val b: Builder[Tuple2[[#T1#,], B], CollSeq2[[#T1#,], B]] = CollSeq2.newBuilder
      val these = this.iterator
      val those = that.iterator
      while (these.hasNext && those.hasNext) {
        val t = these.next
        b += Tuple2 ([#t._1#,], those.next)
    }
    b.result
  }
}

object CollSeq1 {
  def apply[[#T1#,]] (x: Seq[Product1[[#T1#,]]] ) = new CollSeq1(x)
  def newBuilder[[#T1#,]]: Builder[Product1[[#T1#,]], CollSeq1[[#T1#,]]] = new VectorBuilder mapResult apply
}
#
]

/* CollSeq 22 has no flatZip method
 * Thus attempting to consume one will produce a compile time error.
 */
[22..22#class CollSeq1[[#T1#]] private (val underlying: Seq[Product1[[#T1#]]] )
  extends CollSeq
  with IndexedSeq[Product1[[#T1#]]]
  with IndexedSeqLike[Product1[[#T1#]], CollSeq1[[#T1#]]]
  with Product1[[#Seq[T1] #]] {

    override protected[this] def newBuilder: Builder[Product1[[#T1#]], CollSeq1[[#T1#]]] = CollSeq1.newBuilder
    override def apply (idx: Int): Product1[[#T1#]] = underlying (idx)
    lazy val length: Int = underlying.length

    [#override lazy val _1: Seq[T1] = collection.immutable.Seq (underlying.map (_._1): _*) #
    ]
}

object CollSeq1 {
  def apply[[#T1#]] (x: Seq[Product1[[#T1#]]] ) = new CollSeq1(x)
  def newBuilder[[#T1#]]: Builder[Product1[[#T1#]], CollSeq1[[#T1#]]] = new VectorBuilder mapResult apply
}
#
]