/*
 * product-collections is distributed under the 2-Clause BSD license. See the 
 * LICENSE file in the root of the repository.
 *
 * Copyright (c) 2013 Mark Lister
 */

package org.catch22.collections
package io

import org.catch22.collections.immutable._
     
/**
 * A Strongly typed Csv to CollSeq[T1,T2,...Tn] Parser.
 * Use the companion object to instantiate the correct parser:
 * {{{
 * scala> val p = CsvParser[String,Int,Double]
 * p: org.catch22.collections.io.CsvParser3[String,Int,Double] = org.catch22.collections.io.CsvParser3@1d8073f
 * 
 * scala> p.parseFile("sample.csv")
 * res2: org.catch22.collections.immutable.CollSeq3[String,Int,Double] = 
 * CollSeq((Jan,10,22.33),
 *         (Feb,20,44.2),
 *         (Mar,25,55.1))
 *
 *scala> val data="""10,"stuff",2.2
 *    | 11,"otherstuff",3.0"""
 *data: String = 
 *10,"stuff",2.2
 *11,"otherstuff",3.0
 *
 *scala> val parsedData=CsvParser[Int,String,Double].parse(new java.io.StringReader(data))
 *parsedData: org.catch22.collections.immutable.CollSeq3[Int,String,Double] = 
 *CollSeq((10,stuff,2.2),
 *        (11,otherstuff,3.0))
 *
 * }}}
 */
abstract sealed class CsvParser

/**
 * The companion object for [[CsvParser]]
 */
object CsvParser{
  [#/**
 * A CsvParser of arity 1
 */
def apply[[#T1#,]]= new CsvParser1[[#T1#,]]#
  ]
}

[#/**
 * A file to CollSeq1 parser
 */
class CsvParser1[[#T1#,]] extends CsvParser {

/**
 * Parse a csv file.
 * @param filename: The file name
 * @param delimiter: The delimiter. Use \t for tabs
 * @param quoteChar: The character used for quoted text.
 * @param hasHeader: Whether to skip the first line or not.
 *
 * @return a CollSeq1 containing the parsed data
 */
  def parseFile (filename: String,
    delimiter: String = ",",
    quoteChar: Char = '"',
    hasHeader: Boolean = false)(implicit [#c1:GeneralConverter[T1]#]):CollSeq1[[#T1#,]]={

    parse(new java.io.FileReader(filename),delimiter,quoteChar,hasHeader)
  }

/**
 * Parse a java.io.Reader.
 * @param reader: The reader
 * @param delimiter: The delimiter. Use \t for tabs
 * @param quoteChar: The character used for quoted text.
 * @param hasHeader: Whether to skip the first line or not.
 *
 * @return a CollSeq1 containing the parsed data
 */
  def parse (reader: java.io.Reader,
    delimiter: String = ",",
    quoteChar: Char = '"',
    hasHeader: Boolean = false)(implicit [#c1:GeneralConverter[T1]#]):CollSeq1[[#T1#,]]={
    val p = OpenCsv.read(reader,delimiter,quoteChar,hasHeader)
    val q = p.map(x=>Tuple1([#c1.convert (x(0))#])) 
    CollSeq1[[#T1#,]](q.toSeq)
  }
  
}#

] 